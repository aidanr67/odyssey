<?php

namespace Tests\Feature\Services;

use App\Models\OdysseyBook;
use App\Models\OdysseyBookMetadata;
use App\Services\ChatGptClient;
use App\Services\OdysseyService;
use Database\Factories\OdysseyBookFactory;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\App;
use Mockery;
use Tests\TestCase;

/**
 * Class OdysseyBookServiceTest
 *
 * @package Tests\Feature\Services
 *
 * @test
 * @small
 */
class OdysseyBookServiceTest extends TestCase
{
    /**
     * The service we're testing.
     *
     * @var OdysseyService
     */
    private OdysseyService $service;

    /**
     * @return void
     */
    public function setUp(): void
    {
        parent::setUp();
        $this->artisan('migrate');
        $this->service = new OdysseyService;
    }

    /**
     * When all the expected data is there
     * And we try and fetch a page
     * Test that the expected page content and number are returned
     *
     * A basic feature test example.
     */
    public function test_fetch_random_odyssey_page(): void
    {
        OdysseyBookFactory::new()->create([
            'content' => $text  = 'test content',
            'page_number' => 1,
        ]);

        OdysseyBookMetadata::create([
            'key' => 'num_pages',
            'value' => 1,
        ]);

        $page = $this->service->fetchRandomOdysseyPage();

        $this->assertEquals(1, $page->page_number);
        $this->assertEquals($text, $page->content);
    }

    /**
     * When there is no data for the page number generated by the random number generator
     * And we try and pull the page from the model
     * Test that the appropriate exception is thrown
     *
     * @return void
     */
    public function test_exception_is_thrown_when_page_does_not_exist()
    {
        OdysseyBookMetadata::create([
            'key' => 'num_pages',
            'value' => 1,
        ]);

        $this->expectException(ModelNotFoundException::class);

        $this->service->fetchRandomOdysseyPage();
    }

    /**
     * When we are missing the num_pages metadata
     * And we try and pull a random page from the database
     * Assert that the appropriate exception is thrown
     *
     * @return void
     */
    public function test_exception_is_thrown_when_page_number_meta_data_missing()
    {
        OdysseyBookFactory::new()->create([
            'content' => 'test content',
            'page_number' => 1,
        ]);

        $this->expectException(ModelNotFoundException::class);

        $this->service->fetchRandomOdysseyPage();
    }

    /**
     * When calling the context function
     * With a provided passage
     * Assert that the ChatGPT client is called with the appropriate query.
     *
     * @return void
     */
    public function test_get_context_function_calls_chatgpt_with_appropriate_query()
    {
        $testPassage = 'this is a test passage';
        $testResponse = 'here is some context around the test passage';

        $mockClient = Mockery::mock(ChatGptClient::class);
        $mockClient->shouldReceive('query')
            ->withArgs([OdysseyService::QUERY_PREFIX . "\n" . $testPassage])
            ->andReturn('here is some context around the test passage');

        $this->app->instance(ChatGptClient::class, $mockClient);

        $response = $this->service->fetchPassageContext($testPassage);

        $this->assertEquals($testResponse, $response);
    }
}
